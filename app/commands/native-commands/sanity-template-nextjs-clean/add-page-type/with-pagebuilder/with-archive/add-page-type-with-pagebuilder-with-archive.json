{
    "_id": "add-page-type-with-pagebuilder-with-archive",
    "_type": "command",
    "title": "Add PageType with PageBuilder with Archive",
    "slug": "add-page-type-with-pagebuilder-with-archive",
    "show": {
      "anyOf": [
        { "packageJson": { "name": "never" } },
        { "packageJsonArrayContains": { "nextgen-identifiers": "never" } },
        { "commandPackagesContains": ["never"] }
      ]
    },
    "filePaths": [
      {
        "_key": "20250903-front-routes",
        "_type": "filePathGroup",
        "id": "frontend-routes",
        "path": "frontend/app",
        "nodes": [
          {
            "_key": "20250903-front-routes-group",
            "_type": "treeNode",
            "id": "folder-frontend-routes-group",
            "name": "({{.KebabCasePageType}}-route)",
            "type": "folder",
            "code": "",
            "isIndexer": false,
            "children": [
              {
                "_key": "20250903-front-index-folder",
                "_type": "treeNode",
                "id": "folder-frontend-index",
                "name": "{{.KebabCasePlural}}",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-index-file",
                    "_type": "treeNode",
                    "id": "file-frontend-index",
                    "name": "page.tsx",
                    "type": "file",
                    "isIndexer": false,
                    "children": [],
                    "code": "import Link from \"next/link\";\nimport type { Metadata } from \"next\";\nimport { client } from \"@/sanity/lib/client\";\nimport { all{{.PascalCasePlural}}Query } from \"@/sanity/lib/{{.KebabCasePageType}}.queries\";\n\nexport const metadata: Metadata = {\n  title: \"{{.PascalCasePlural}}\",\n  description: \"All {{.LowerCasePlural}}\"\n};\n\nexport default async function {{.PascalCasePageType}}IndexPage() {\n  const items = await client.fetch(all{{.PascalCasePlural}}Query);\n\n  if (!items?.length) {\n    return (\n      <main className=\"container mx-auto p-6\">\n        <h1 className=\"text-2xl font-semibold\">{{.PascalCasePlural}}</h1>\n        <p className=\"opacity-70 mt-2\">No {{.LowerCasePlural}} yet.</p>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"container mx-auto p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6\">{{.PascalCasePlural}}</h1>\n      <ul className=\"space-y-4\">\n        {items.map((it: any) => (\n          <li key={it._id} className=\"border rounded-lg p-4\">\n            <h2 className=\"text-lg font-medium\">\n              <Link href={`/{{.KebabCasePageType}}/${it.slug}`}>{it.name}</Link>\n            </h2>\n            {it.subheading && <p className=\"opacity-80 mt-1\">{it.subheading}</p>}\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n"
                  }
                ]
              },
              {
                "_key": "20250903-front-slug-folder",
                "_type": "treeNode",
                "id": "folder-frontend-slug-root",
                "name": "{{.KebabCasePageType}}",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-slug-param",
                    "_type": "treeNode",
                    "id": "folder-frontend-slug",
                    "name": "[slug]",
                    "type": "folder",
                    "code": "",
                    "isIndexer": false,
                    "children": [
                      {
                        "_key": "20250903-front-slug-page",
                        "_type": "treeNode",
                        "id": "file-frontend-slug-page",
                        "name": "page.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "import type {Metadata} from 'next'\nimport Head from 'next/head'\n\nimport PageBuilderPage from '@/app/components/PageBuilder'\nimport {sanityFetch} from '@/sanity/lib/live'\nimport { {{.LowerCasePageType}}BySlugQuery, {{.LowerCasePageType}}Slugs } from '@/sanity/lib/{{.KebabCasePageType}}.queries'\nimport {PageOnboarding} from '@/app/components/Onboarding'\n\nexport type Props = { params: Promise<{slug: string}> }\n\nexport async function generateStaticParams() {\n  const {data} = await sanityFetch({\n    query: {{.LowerCasePageType}}Slugs,\n    perspective: 'published',\n    stega: false,\n  })\n  return data\n}\n\nexport async function generateMetadata(props: Props): Promise<Metadata> {\n  const params = await props.params\n  const {data: page} = await sanityFetch({\n    query: {{.LowerCasePageType}}BySlugQuery,\n    params,\n    stega: false,\n  })\n\n  return {\n    title: page?.name,\n    description: page?.heading,\n  } satisfies Metadata\n}\n\nexport default async function Page(props: Props) {\n  const params = await props.params\n  const [{data: page}] = await Promise.all([\n    sanityFetch({ query: {{.LowerCasePageType}}BySlugQuery, params })\n  ])\n\n  if (!page?._id) {\n    return (\n      <div className=\"py-40\">\n        <PageOnboarding />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"my-12 lg:my-24\">\n      <Head>\n        <title>{page.heading}</title>\n      </Head>\n      <div className=\"\">\n        <div className=\"container\">\n          <div className=\"pb-6 border-b border-gray-100\">\n            <div className=\"max-w-3xl\">\n              <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\n                {page.heading}\n              </h2>\n              <p className=\"mt-4 text-base lg:text-lg leading-relaxed text-gray-600 uppercase font-light\">\n                {page.subheading}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <PageBuilderPage page={page as any} />\n    </div>\n  )\n}\n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "_key": "20250903-front-queries",
        "_type": "filePathGroup",
        "id": "frontend-queries",
        "path": "frontend/sanity/lib",
        "nodes": [
          {
            "_key": "20250903-front-queries-file",
            "_type": "treeNode",
            "id": "file-frontend-queries",
            "name": "{{.KebabCasePageType}}.queries.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import { defineQuery } from \"next-sanity\";\n\nconst linkReference = /* groq */ `\n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n`;\n\nconst linkFields = /* groq */ `\n  link {\n    ...,\n    ${linkReference}\n  }\n`;\n\nexport const listFields = /* groq */ `\n  _id,\n  \"name\": coalesce(name, \"Untitled\"),\n  \"slug\": slug.current,\n  heading,\n  subheading\n`;\n\n// List (plural)\nexport const all{{.PascalCasePlural}}Query = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)] | order(_updatedAt desc) {\n    ${listFields}\n  }\n`);\n\n// By slug (singular)\nexport const {{.LowerCasePageType}}BySlugQuery = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == \"callToAction\" => {\n        ${linkFields},\n      },\n      _type == \"infoSection\" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            ${linkReference}\n          }\n        }\n      },\n    },\n  }\n`);\n\n// Slugs only\nexport const {{.LowerCasePageType}}Slugs = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)]{ \"slug\": slug.current }\n`);\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-schema",
        "_type": "filePathGroup",
        "id": "studio-schema",
        "path": "studio/src/schemaTypes/documents",
        "nodes": [
          {
            "_key": "20250903-studio-schema-file",
            "_type": "treeNode",
            "id": "file-studio-schema",
            "name": "{{.KebabCasePageType}}.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCasePageType}} = defineType({\n  name: '{{.LowerCasePageType}}',\n  title: '{{.PascalCasePageType}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({\n      name: 'name',\n      title: 'Name',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n\n    defineField({\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      validation: (Rule) => Rule.required(),\n      options: {\n        source: 'name',\n        maxLength: 96,\n      },\n    }),\n    defineField({\n      name: 'heading',\n      title: 'Heading',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'subheading',\n      title: 'Subheading',\n      type: 'string',\n    }),\n    defineField({\n      name: 'pageBuilder',\n      title: 'Page builder',\n      type: 'array',\n      of: [{type: 'callToAction'}, {type: 'infoSection'}],\n      options: {\n        insertMenu: {\n          // Configure the \"Add Item\" menu to display a thumbnail preview of the content type. https://www.sanity.io/docs/array-type#efb1fe03459d\n          views: [\n            {\n              name: 'grid',\n              previewImageUrl: (schemaTypeName) =>\n                `/static/page-builder-thumbnails/${schemaTypeName}.webp`,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n})\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-indexer-group",
        "_type": "filePathGroup",
        "id": "studio-indexer",
        "path": "studio/src/schemaTypes",
        "nodes": [
          {
            "_key": "20250903-studio-indexer-file",
            "_type": "treeNode",
            "id": "file-studio-indexer",
            "name": "index.ts",
            "type": "file",
            "isIndexer": true,
            "children": [],
            "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCasePageType}} } from './documents/{{.KebabCasePageType}}'\n// END OF DOCUMENT IMPORT\n\n// START OF DOCUMENT ARRAY ITEM\n  {{.LowerCasePageType}},\n// END OF DOCUMENT ARRAY ITEM\n"
          }
        ]
      }
    ]
  }
  