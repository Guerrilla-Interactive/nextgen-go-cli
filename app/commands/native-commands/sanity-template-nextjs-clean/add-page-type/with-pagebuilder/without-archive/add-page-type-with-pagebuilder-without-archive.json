{
  "_id": "add-page-type-with-pagebuilder-without-archive",
  "_type": "command",
  "title": "Add PageType with PageBuilder without Archive",
  "slug": "add-page-type-with-pagebuilder-without-archive",
  "variables": {
    "PageTypeSingular": {
      "title": "Name your page type",
      "priority": 1,
      "description": "This is the name of the \"_type\" we use in Sanity. This dictates a lot of the naming conventions elsewhere.",
      "examples": [
        "author",
        "event",
        "product",
        "service"
      ]
  },
  "PageTypePlural": {
      "title": "Pluralize your page type",
      "priority": 2,
      "description": "This helps cases where we need to pluralize. No worries if it's the same as the singular.",
      "examples": [
        "authors",
        "events",
        "products",
        "services"
      ]
  }
},
  "show": { "anyOf": [
    { "packageJson": { "name": "never" } },
    { "packageJsonArrayContains": { "nextgen-identifiers": "never" } },
    { "commandPackagesContains": ["never"] }
  ] },
  "filePaths": [
    {
      "_key": "1756909042391-evl79ur3k",
      "_type": "filePathGroup",
      "id": "path-1756909042391-s66i6ib",
      "path": "frontend/app",
      "nodes": [
        {
          "_key": "20250903-front-routes-group",
          "_type": "treeNode",
          "id": "folder-frontend-routes-group",
          "name": "({{.KebabCasePageTypeSingular}}-route)",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "children": [
            {
              "_key": "20250903-front-slug-folder",
              "_type": "treeNode",
              "children": [
                {
                  "_key": "20250903-front-slug-param",
                  "_type": "treeNode",
                  "children": [
                    {
                      "_key": "20250903-front-slug-page",
                      "_type": "treeNode",
                      "id": "file-frontend-slug-page",
                      "name": "page.tsx",
                      "type": "file",
                      "code": "import type {Metadata, ResolvingMetadata} from 'next'\r\nimport {notFound} from 'next/navigation'\r\nimport {type PortableTextBlock} from 'next-sanity'\r\nimport {Suspense} from 'react'\r\n\r\nimport Avatar from '@/app/components/Avatar'\r\nimport CoverImage from '@/app/components/CoverImage'\r\nimport {MorePosts} from '@/app/components/Posts'\r\nimport PortableText from '@/app/components/PortableText'\r\nimport {sanityFetch} from '@/sanity/lib/live'\r\nimport { {{.LowerCasePageTypeSingular}}Slugs, {{.LowerCasePageTypeSingular}}BySlugQuery } from '@/sanity/lib/pagetype-queries/{{.KebabCasePageTypeSingular}}.queries'\r\nimport {resolveOpenGraphImage} from '@/sanity/lib/utils'\r\n\r\nexport type Props = { params: Promise<{slug: string}> }\r\n\r\nexport async function generateStaticParams() {\r\n  const {data} = await sanityFetch({\r\n    query: {{.LowerCasePageTypeSingular}}Slugs,\r\n    perspective: 'published',\r\n    stega: false,\r\n  })\r\n  return data\r\n}\r\n\r\nexport async function generateMetadata(props: Props, parent: ResolvingMetadata): Promise<Metadata> {\r\n  const params = await props.params\r\n  const {data: doc} = await sanityFetch({\r\n    query: {{.LowerCasePageTypeSingular}}BySlugQuery,\r\n    params,\r\n    stega: false,\r\n  })\r\n\r\n  const previousImages = (await parent).openGraph?.images || []\r\n  const ogImage = resolveOpenGraphImage(doc?.coverImage)\r\n\r\n  return {\r\n    authors:\r\n      doc?.author?.firstName && doc?.author?.lastName\r\n        ? [{name: `${doc.author.firstName} ${doc.author.lastName}`}] \r\n        : [],\r\n    title: doc?.title,\r\n    description: doc?.excerpt,\r\n    openGraph: {\r\n      images: ogImage ? [ogImage, ...previousImages] : previousImages,\r\n    },\r\n  } satisfies Metadata\r\n}\r\n\r\nexport default async function {{.PascalCasePageTypeSingular}}Page(props: Props) {\r\n  const params = await props.params\r\n  const [{data: doc}] = await Promise.all([\r\n    sanityFetch({ query: {{.LowerCasePageTypeSingular}}BySlugQuery, params })\r\n  ])\r\n\r\n  if (!doc?._id) {\r\n    return notFound()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n        <div className=\"container my-12 lg:my-24 grid gap-12\">\r\n          <div>\r\n            <div className=\"pb-6 grid gap-6 mb-6 border-b border-gray-100\">\r\n              <div className=\"max-w-3xl flex flex-col gap-6\">\r\n                <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\r\n                  {doc.title}\r\n                </h2>\r\n              </div>\r\n              <div className=\"max-w-3xl flex gap-4 items-center\">\r\n                {doc.author && doc.author.firstName && doc.author.lastName && (\r\n                  <Avatar person={doc.author} date={doc.date} />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <article className=\"gap-6 grid max-w-4xl\">\r\n              <div className=\"\">\r\n                {doc?.coverImage && <CoverImage image={doc.coverImage} priority />}\r\n              </div>\r\n              {doc?.content?.length ? (\r\n                <PortableText className=\"max-w-2xl\" value={doc.content as PortableTextBlock[]} />\r\n              ) : null}\r\n            </article>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"border-t border-gray-100 bg-gray-50\">\r\n        <div className=\"container py-12 lg:py-24 grid gap-12\">\r\n          <aside>\r\n            <Suspense>{await MorePosts({skip: doc._id, limit: 2})}</Suspense>\r\n          </aside>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n",
                      "isIndexer": false,
                      "markers": [],
                      "children": []
                    }
                  ],
                  "code": "",
                  "id": "folder-frontend-slug",
                  "isIndexer": false,
                  "name": "[slug]",
                  "type": "folder"
                }
              ],
              "code": "",
              "id": "folder-frontend-slug-root",
              "isIndexer": false,
              "name": "{{.KebabCasePageTypeSingular}}",
              "type": "folder"
            }
          ]
        }
      ]
    },
    {
      "_key": "1756909042391-a6xpbwf6h",
      "_type": "filePathGroup",
      "id": "path-1756909042391-z1wjfhh",
      "path": "frontend/sanity/lib",
      "nodes": [
        {
          "_key": "1757064566263-k9lklr230",
          "_type": "treeNode",
          "id": "folder-1757064566263",
          "name": "pagetype-queries",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "markers": [],
          "children": [
            {
              "_key": "20250903-front-queries-file",
              "_type": "treeNode",
              "id": "file-frontend-queries",
              "name": "{{.KebabCasePageTypeSingular}}.queries.ts",
              "type": "file",
              "code": "import { defineQuery } from \"next-sanity\";\r\nimport { linkFields, linkReference } from \"../queries\";\r\n \r\nexport const listFields = /* groq */ `\r\n  _id,\r\n  \"name\": coalesce(name, \"Untitled\"),\r\n  \"slug\": slug.current,\r\n  heading,\r\n  subheading\r\n`;\r\n\r\n// List (plural)\r\nexport const all{{.PascalCasePageTypePlural}}Query = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageTypeSingular}}\" && defined(slug.current)] | order(_updatedAt desc) {\r\n    ${listFields}\r\n  }\r\n`);\r\n\r\n// By slug (singular)\r\nexport const {{.LowerCasePageTypeSingular}}BySlugQuery = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageTypeSingular}}\" && slug.current == $slug][0]{\r\n    _id,\r\n    _type,\r\n    name,\r\n    slug,\r\n    heading,\r\n    subheading,\r\n    \"pageBuilder\": pageBuilder[]{\r\n        ...,\r\n        _type == \"callToAction\" => {\r\n          ${linkFields},\r\n          },\r\n          _type == \"infoSection\" => {\r\n            content[]{\r\n              ...,\r\n              markDefs[]{\r\n                ...,\r\n                ${linkReference}\r\n              }\r\n            }\r\n          }\r\n        },\r\n    }\r\n`);\r\n\r\n\r\n// Slugs only\r\nexport const {{.LowerCasePageTypeSingular}}Slugs = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageTypeSingular}}\" && defined(slug.current)]{ \"slug\": slug.current }\r\n`);\r\n",
              "isIndexer": false,
              "markers": [],
              "children": []
            }
          ]
        },
    {
            "_key": "1756919951450-hqircx415",
            "_type": "treeNode",
            "id": "file-1756919951450",
            "markers": 
            [
            {"mark":"EXPORT LINK FIELDS", "fallback":{
              "behaviour": "replaceIfMissing",
              "target": "const linkFields = /* groq */ `",
              "requireAbsent": "export const linkFields = /* groq */ `",
              "replacement": "export const linkFields = /* groq */ `",
              "occurrence": "first"
              }
            },
            {"mark":"EXPORT LINK REFERENCE", "fallback":{
              "behaviour": "replaceIfMissing",
              "target": "const linkReference = /* groq */ `",
              "requireAbsent": "export const linkReference = /* groq */ `",
              "replacement": "export const linkReference = /* groq */ `",
              "occurrence": "first"
              }
            },
            {"mark":"LINK REFERENCES", "fallback":{
              "target": "_type == \"link\" => {",  
              "behaviour": "insertAfter"
              }
            },     
            {"mark":"SITEMAP TYPES", "fallback":{
              "target": "&& defined(slug.current)] | order(_type asc)",
              "behaviour": "insertBeforeInline",
              "content": " &&_type == \"{{.LowerCasePageTypeSingular}}\"",
              "fallbackOnly": true
            }}],
            "name": "queries.ts",
            "type": "file",
            "code": "//THIS IS AN INDEXER FILE \nimport {defineQuery} from 'next-sanity'\r\n\r\nexport const settingsQuery = defineQuery(`*[_type == \"settings\"][0]`)\r\n\r\nexport const postFields = /* groq */ `\r\n  _id,\r\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\r\n  \"title\": coalesce(title, \"Untitled\"),\r\n  \"slug\": slug.current,\r\n  excerpt,\r\n  coverImage,\r\n  \"date\": coalesce(date, _updatedAt),\r\n  \"author\": author->{firstName, lastName, picture},\r\n`\r\n\r\nexport const linkReference = /* groq */ `\r\n  _type == \"link\" => {\r\n    \"page\": page->slug.current,\r\n    \"post\": post->slug.current,\r\n    // START OF LINK REFERENCES \r\n    \"{{.LowerCasePageTypeSingular}}\": {{.LowerCasePageTypeSingular}}->slug.current,\r\n    // END OF LINK REFERENCES IMPORT\r\n\r\n  }\r\n`\r\n\r\nexport const linkFields = /* groq */ `\r\n  link {\r\n      ...,\r\n      ${linkReference}\r\n      }\r\n`\r\n\r\nexport const pageBuilderFields = /* groq */ `\r\n  ...,\r\n  _type == \"callToAction\" => {\r\n    ${linkFields},\r\n  },\r\n  _type == \"infoSection\" => {\r\n    content[]{\r\n      ...,\r\n      markDefs[]{\r\n        ...,\r\n        ${linkReference}\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const getPageQuery = defineQuery(`\r\n  *[_type == 'page' && slug.current == $slug][0]{\r\n    _id,\r\n    _type,\r\n    name,\r\n    slug,\r\n    heading,\r\n    subheading,\r\n    \"pageBuilder\": pageBuilder[]{\r\n      ${pageBuilderFields}\r\n    },\r\n  }\r\n`)\r\n\r\n\r\n\r\nexport const sitemapData = defineQuery(`\r\n  *[_type == \"page\" || _type == \"post\" && // START OF SITEMAP TYPES ITEM && _type == \"{{.LowerCasePageTypeSingular}}\" && // END OF SITEMAP TYPES ITEM defined(slug.current)] | order(_type asc) {\r\n    \"slug\": slug.current,\r\n    _type,\r\n    _updatedAt,\r\n  }\r\n`)\r\n\r\nexport const allPostsQuery = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const morePostsQuery = defineQuery(`\r\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postQuery = defineQuery(`\r\n  *[_type == \"post\" && slug.current == $slug] [0] {\r\n    content[]{\r\n    ...,\r\n    markDefs[]{\r\n      ...,\r\n      ${linkReference}\r\n    }\r\n  },\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postPagesSlugs = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n\r\nexport const pagesSlugs = defineQuery(`\r\n  *[_type == \"page\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n",
            "isIndexer": true,
            "children": []
          }
      ]
    },

    {
      "_key": "1756909042391-m2o59yxw7",
      "_type": "filePathGroup",
      "id": "path-1756909042391-qw54de3",
      "path": "studio/src/schemaTypes/documents",
      "nodes": [
        {
          "_key": "20250903-studio-schema-file",
          "_type": "treeNode",
          "id": "file-studio-schema",
          "name": "{{.KebabCasePageTypeSingular}}.ts",
          "type": "file",
          "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCasePageTypeSingular}} = defineType({\n  name: '{{.LowerCasePageTypeSingular}}',\n  title: '{{.PascalCasePageTypeSingular}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({\n      name: 'name',\n      title: 'Name',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n\n    defineField({\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      validation: (Rule) => Rule.required(),\n      options: {\n        source: 'name',\n        maxLength: 96,\n      },\n    }),\n    defineField({\n      name: 'heading',\n      title: 'Heading',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'subheading',\n      title: 'Subheading',\n      type: 'string',\n    }),\n    defineField({\n      name: 'pageBuilder',\n      title: 'Page builder',\n      type: 'array',\n      of: [{type: 'callToAction'}, {type: 'infoSection'}],\n      options: {\n        insertMenu: {\n          // Configure the \"Add Item\" menu to display a thumbnail preview of the content type. https://www.sanity.io/docs/array-type#efb1fe03459d\n          views: [\n            {\n              name: 'grid',\n              previewImageUrl: (schemaTypeName) =>\n                `/static/page-builder-thumbnails/${schemaTypeName}.webp`,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n})\n",
          "isIndexer": false,
          "children": []
        }
      ]
    },
    {
      "_key": "1756909042391-h3hjrm2zx",
      "_type": "filePathGroup",
      "id": "path-1756909042391-kajxt7t",
      "path": "studio/src/schemaTypes",
      "nodes": [
        {
          "_key": "20250903-studio-indexer-file",
          "_type": "treeNode",
          "id": "file-studio-indexer",
          "name": "index.ts",
          "type": "file",
          "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCasePageTypeSingular}} } from './documents/{{.KebabCasePageTypeSingular}}'\n// END OF DOCUMENT IMPORT\n\n// START OF SITEMAP TYPES ITEM\n  {{.LowerCasePageTypeSingular}},\n// END OF SITEMAP TYPES ITEM\n",
          "isIndexer": false,
          "children": []
        }
      ]
    }
  ]
}