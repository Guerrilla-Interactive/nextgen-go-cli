{
  "_id": "add-page-type-with-pagebuilder-without-archive",
  "_type": "command",
  "title": "Add PageType with PageBuilder without Archive",
  "slug": "add-page-type-with-pagebuilder-without-archive",
  "show": {
    "anyOf": [
      { "packageJson": { "name": "never" } },
      { "packageJsonArrayContains": { "nextgen-identifiers": "never" } },
      { "commandPackagesContains": ["never"] }
    ]
  },
  "filePaths": [
    {
      "_key": "20250903-front-routes",
      "_type": "filePathGroup",
      "id": "frontend-routes",
      "path": "frontend/app",
      "nodes": [
        {
          "_key": "20250903-front-routes-group",
          "_type": "treeNode",
          "id": "folder-frontend-routes-group",
          "name": "({{.KebabCasePageType}}-route)",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "children": [
            {
              "_key": "20250903-front-slug-folder",
              "_type": "treeNode",
              "id": "folder-frontend-slug-root",
              "name": "{{.KebabCasePageType}}",
              "type": "folder",
              "code": "",
              "isIndexer": false,
              "children": [
                {
                  "_key": "20250903-front-slug-param",
                  "_type": "treeNode",
                  "id": "folder-frontend-slug",
                  "name": "[slug]",
                  "type": "folder",
                  "code": "",
                  "isIndexer": false,
                  "children": [
                    {
                      "_key": "20250903-front-slug-page",
                      "_type": "treeNode",
                      "id": "file-frontend-slug-page",
                      "name": "page.tsx",
                      "type": "file",
                      "isIndexer": false,
                      "children": [],
                      "code": "import type {Metadata} from 'next'\nimport Head from 'next/head'\n\nimport PageBuilderPage from '@/app/components/PageBuilder'\nimport {sanityFetch} from '@/sanity/lib/live'\nimport {getPageQuery, pagesSlugs} from '@/sanity/lib/queries'\nimport {GetPageQueryResult} from '@/sanity.types'\nimport {PageOnboarding} from '@/app/components/Onboarding'\n\nexport type Props = { params: Promise<{slug: string}> }\n\nexport async function generateStaticParams() {\n  const {data} = await sanityFetch({\n    query: pagesSlugs,\n    perspective: 'published',\n    stega: false,\n  })\n  return data\n}\n\nexport async function generateMetadata(props: Props): Promise<Metadata> {\n  const params = await props.params\n  const {data: page} = await sanityFetch({\n    query: getPageQuery,\n    params,\n    stega: false,\n  })\n\n  return {\n    title: page?.name,\n    description: page?.heading,\n  } satisfies Metadata\n}\n\nexport default async function Page(props: Props) {\n  const params = await props.params\n  const [{data: page}] = await Promise.all([\n    sanityFetch({ query: getPageQuery, params })\n  ])\n\n  if (!page?._id) {\n    return (\n      <div className=\"py-40\">\n        <PageOnboarding />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"my-12 lg:my-24\">\n      <Head>\n        <title>{page.heading}</title>\n      </Head>\n      <div className=\"\">\n        <div className=\"container\">\n          <div className=\"pb-6 border-b border-gray-100\">\n            <div className=\"max-w-3xl\">\n              <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\n                {page.heading}\n              </h2>\n              <p className=\"mt-4 text-base lg:text-lg leading-relaxed text-gray-600 uppercase font-light\">\n                {page.subheading}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <PageBuilderPage page={page as GetPageQueryResult} />\n    </div>\n  )\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "_key": "20250903-front-queries",
      "_type": "filePathGroup",
      "id": "frontend-queries",
      "path": "frontend/sanity/lib",
      "nodes": [
        {
          "_key": "20250903-front-queries-file",
          "_type": "treeNode",
          "id": "file-frontend-queries",
          "name": "{{.KebabCasePageType}}.queries.ts",
          "type": "file",
          "isIndexer": false,
          "children": [],
          "code": "import { defineQuery } from \"next-sanity\";\n\nexport const fields = /* groq */ `\n  _id,\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  hero,\n  content\n`;\n\n// List (plural)\nexport const all{{.PascalCasePlural}}Query = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)] | order(_updatedAt desc) {\n    ${fields}\n  }\n`);\n\n// By slug (singular)\nexport const {{.LowerCasePageType}}BySlugQuery = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && slug.current == $slug][0] {\n    ${fields}\n  }\n`);\n\n// Slugs only\nexport const {{.LowerCasePageType}}Slugs = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)]{ \"slug\": slug.current }\n`);\n"
        }
      ]
    },
    {
      "_key": "20250903-studio-schema",
      "_type": "filePathGroup",
      "id": "studio-schema",
      "path": "studio/src/schemaTypes/documents",
      "nodes": [
        {
          "_key": "20250903-studio-schema-file",
          "_type": "treeNode",
          "id": "file-studio-schema",
          "name": "{{.KebabCasePageType}}.ts",
          "type": "file",
          "isIndexer": false,
          "children": [],
          "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCasePageType}} = defineType({\n  name: '{{.LowerCasePageType}}',\n  title: '{{.PascalCasePageType}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({ name: 'title', title: 'Title', type: 'string', validation: r => r.required() }),\n    defineField({ name: 'slug', title: 'Slug', type: 'slug', options: { source: 'title', maxLength: 96 }, validation: r => r.required() }),\n    defineField({ name: 'excerpt', title: 'Excerpt', type: 'text' }),\n    defineField({\n      name: 'hero', title: 'Hero image', type: 'image', options: { hotspot: true, aiAssist: { imageDescriptionField: 'alt' } },\n      fields: [\n        defineField({ name: 'alt', title: 'Alt text', type: 'string', description: 'Important for SEO and accessibility.', validation: rule => rule.custom((alt, ctx) => { if ((ctx.document?.hero as any)?.asset?._ref && !alt) return 'Required'; return true; }) })\n      ]\n    }),\n    defineField({ name: 'content', title: 'Content', type: 'blockContent' }),\n  ],\n  preview: {\n    select: { title: 'title', media: 'hero' },\n    prepare({ title, media }) { return { title, media } }\n  }\n})\n"
        }
      ]
    },
    {
      "_key": "20250903-studio-indexer-group",
      "_type": "filePathGroup",
      "id": "studio-indexer",
      "path": "studio/src/schemaTypes",
      "nodes": [
        {
          "_key": "20250903-studio-indexer-file",
          "_type": "treeNode",
          "id": "file-studio-indexer",
          "name": "index.ts",
          "type": "file",
          "isIndexer": true,
          "children": [],
          "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCasePageType}} } from './documents/{{.KebabCasePageType}}'\n// END OF DOCUMENT IMPORT\n\n// START OF DOCUMENT ARRAY ITEM\n  {{.LowerCasePageType}},\n// END OF DOCUMENT ARRAY ITEM\n"
        }
      ]
    }
  ]
}
