{
  "_id": "add-page-type-with-pagebuilder-without-archive",
  "_type": "command",
  "title": "Add PageType with PageBuilder without Archive",
  "slug": "add-page-type-with-pagebuilder-without-archive",
  "show": { "anyOf": [
    { "packageJson": { "name": "never" } },
    { "packageJsonArrayContains": { "nextgen-identifiers": "never" } },
    { "commandPackagesContains": ["never"] }
  ] },
  "filePaths": [
    {
      "_key": "1756909042391-evl79ur3k",
      "_type": "filePathGroup",
      "id": "path-1756909042391-s66i6ib",
      "path": "frontend/app",
      "nodes": [
        {
          "_key": "20250903-front-routes-group",
          "_type": "treeNode",
          "id": "folder-frontend-routes-group",
          "name": "({{.KebabCasePageType}}-route)",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "children": [
            {
              "_key": "20250903-front-slug-folder",
              "_type": "treeNode",
              "children": [
                {
                  "_key": "20250903-front-slug-param",
                  "_type": "treeNode",
                  "children": [
                    {
                      "_key": "20250903-front-slug-page",
                      "_type": "treeNode",
                      "children": [],
                      "code": "import type {Metadata} from 'next'\nimport Head from 'next/head'\n\nimport PageBuilderPage from '@/app/components/PageBuilder'\nimport {sanityFetch} from '@/sanity/lib/live'\nimport { {{.LowerCasePageType}}BySlugQuery, {{.LowerCasePageType}}Slugs } from '@/sanity/lib/{{.KebabCasePageType}}.queries'\nimport {PageOnboarding} from '@/app/components/Onboarding'\n\nexport type Props = { params: Promise<{slug: string}> }\n\nexport async function generateStaticParams() {\n  const {data} = await sanityFetch({\n    query: {{.LowerCasePageType}}Slugs,\n    perspective: 'published',\n    stega: false,\n  })\n  return data\n}\n\nexport async function generateMetadata(props: Props): Promise<Metadata> {\n  const params = await props.params\n  const {data: page} = await sanityFetch({\n    query: {{.LowerCasePageType}}BySlugQuery,\n    params,\n    stega: false,\n  })\n\n  return {\n    title: page?.name,\n    description: page?.heading,\n  } satisfies Metadata\n}\n\nexport default async function Page(props: Props) {\n  const params = await props.params\n  const [{data: page}] = await Promise.all([\n    sanityFetch({ query: {{.LowerCasePageType}}BySlugQuery, params })\n  ])\n\n  if (!page?._id) {\n    return (\n      <div className=\"py-40\">\n        <PageOnboarding />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"my-12 lg:my-24\">\n      <Head>\n        <title>{page.heading}</title>\n      </Head>\n      <div className=\"\">\n        <div className=\"container\">\n          <div className=\"pb-6 border-b border-gray-100\">\n            <div className=\"max-w-3xl\">\n              <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\n                {page.heading}\n              </h2>\n              <p className=\"mt-4 text-base lg:text-lg leading-relaxed text-gray-600 uppercase font-light\">\n                {page.subheading}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <PageBuilderPage page={page as any} />\n    </div>\n  )\n}\n",
                      "id": "file-frontend-slug-page",
                      "isIndexer": false,
                      "name": "page.tsx",
                      "type": "file"
                    }
                  ],
                  "code": "",
                  "id": "folder-frontend-slug",
                  "isIndexer": false,
                  "name": "[slug]",
                  "type": "folder"
                }
              ],
              "code": "",
              "id": "folder-frontend-slug-root",
              "isIndexer": false,
              "name": "{{.KebabCasePageType}}",
              "type": "folder"
            }
          ]
        }
      ]
    },
    {
      "_key": "1756909042391-a6xpbwf6h",
      "_type": "filePathGroup",
      "id": "path-1756909042391-z1wjfhh",
      "path": "frontend/sanity/lib",
      "nodes": [
        {
          "_key": "20250903-front-queries-file",
          "_type": "treeNode",
          "id": "file-frontend-queries",
          "name": "{{.KebabCasePageType}}.queries.ts",
          "type": "file",
          "markers": [],
          "code": "import { defineQuery } from \"next-sanity\";\nimport { pageBuilderFields } from \"./queries\";\n\nexport const listFields = /* groq */ `\n  _id,\n  \"name\": coalesce(name, \"Untitled\"),\n  \"slug\": slug.current,\n  heading,\n  subheading\n`;\n\n// List (plural)\nexport const all{{.PascalCasePlural}}Query = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)] | order(_updatedAt desc) {\n    ${listFields}\n  }\n`);\n\n// By slug (singular)\nexport const {{.LowerCasePageType}}BySlugQuery = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ${pageBuilderFields}\n    },\n  }\n`);\n\n\n// Slugs only\nexport const {{.LowerCasePageType}}Slugs = defineQuery(`\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)]{ \"slug\": slug.current }\n`);\n",
          "isIndexer": false,
          "children": []
        },
        {
          "_key": "1756919951450-hqircx415",
          "_type": "treeNode",
          "id": "file-1756919951450",
          "markers": 
          [{"mark":"LINK REFERENCES", "fallback":{
            "target": "_type == \"link\" => {",  
            "behaviour": "insertAfter"
            }
          },
          
          {"mark":"SITEMAP TYPES", "fallback":{
            "target": "&& defined(slug.current)] | order(_type asc)",
            "behaviour": "insertBeforeInline",
            "content": "&&_type == \"{{.LowerCasePageType}}\"",
            "fallbackOnly": true
          }}],
          "name": "queries.ts",
          "type": "file",
          "code": "//THIS IS AN INDEXER FILE \nimport {defineQuery} from 'next-sanity'\r\n\r\nexport const settingsQuery = defineQuery(`*[_type == \"settings\"][0]`)\r\n\r\nexport const postFields = /* groq */ `\r\n  _id,\r\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\r\n  \"title\": coalesce(title, \"Untitled\"),\r\n  \"slug\": slug.current,\r\n  excerpt,\r\n  coverImage,\r\n  \"date\": coalesce(date, _updatedAt),\r\n  \"author\": author->{firstName, lastName, picture},\r\n`\r\n\r\nexport const linkReference = /* groq */ `\r\n  _type == \"link\" => {\r\n    \"page\": page->slug.current,\r\n    \"post\": post->slug.current,\r\n    // START OF LINK REFERENCES \r\n    \"{{.LowerCasePageType}}\": {{.LowerCasePageType}}->slug.current,\r\n    // END OF LINK REFERENCES IMPORT\r\n\r\n  }\r\n`\r\n\r\nexport const linkFields = /* groq */ `\r\n  link {\r\n      ...,\r\n      ${linkReference}\r\n      }\r\n`\r\n\r\nexport const pageBuilderFields = /* groq */ `\r\n  ...,\r\n  _type == \"callToAction\" => {\r\n    ${linkFields},\r\n  },\r\n  _type == \"infoSection\" => {\r\n    content[]{\r\n      ...,\r\n      markDefs[]{\r\n        ...,\r\n        ${linkReference}\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const getPageQuery = defineQuery(`\r\n  *[_type == 'page' && slug.current == $slug][0]{\r\n    _id,\r\n    _type,\r\n    name,\r\n    slug,\r\n    heading,\r\n    subheading,\r\n    \"pageBuilder\": pageBuilder[]{\r\n      ${pageBuilderFields}\r\n    },\r\n  }\r\n`)\r\n\r\n\r\n\r\nexport const sitemapData = defineQuery(`\r\n  *[_type == \"page\" || _type == \"post\" && // START OF SITEMAP TYPES ITEM && _type == \"{{.LowerCasePageType}}\" && // END OF SITEMAP TYPES ITEM defined(slug.current)] | order(_type asc) {\r\n    \"slug\": slug.current,\r\n    _type,\r\n    _updatedAt,\r\n  }\r\n`)\r\n\r\nexport const allPostsQuery = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const morePostsQuery = defineQuery(`\r\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postQuery = defineQuery(`\r\n  *[_type == \"post\" && slug.current == $slug] [0] {\r\n    content[]{\r\n    ...,\r\n    markDefs[]{\r\n      ...,\r\n      ${linkReference}\r\n    }\r\n  },\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postPagesSlugs = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n\r\nexport const pagesSlugs = defineQuery(`\r\n  *[_type == \"page\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n",
          "isIndexer": true,
          "children": []
        }
      ]
    },

    {
      "_key": "1756909042391-m2o59yxw7",
      "_type": "filePathGroup",
      "id": "path-1756909042391-qw54de3",
      "path": "studio/src/schemaTypes/documents",
      "nodes": [
        {
          "_key": "20250903-studio-schema-file",
          "_type": "treeNode",
          "id": "file-studio-schema",
          "name": "{{.KebabCasePageType}}.ts",
          "type": "file",
          "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCasePageType}} = defineType({\n  name: '{{.LowerCasePageType}}',\n  title: '{{.PascalCasePageType}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({\n      name: 'name',\n      title: 'Name',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n\n    defineField({\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      validation: (Rule) => Rule.required(),\n      options: {\n        source: 'name',\n        maxLength: 96,\n      },\n    }),\n    defineField({\n      name: 'heading',\n      title: 'Heading',\n      type: 'string',\n      validation: (Rule) => Rule.required(),\n    }),\n    defineField({\n      name: 'subheading',\n      title: 'Subheading',\n      type: 'string',\n    }),\n    defineField({\n      name: 'pageBuilder',\n      title: 'Page builder',\n      type: 'array',\n      of: [{type: 'callToAction'}, {type: 'infoSection'}],\n      options: {\n        insertMenu: {\n          // Configure the \"Add Item\" menu to display a thumbnail preview of the content type. https://www.sanity.io/docs/array-type#efb1fe03459d\n          views: [\n            {\n              name: 'grid',\n              previewImageUrl: (schemaTypeName) =>\n                `/static/page-builder-thumbnails/${schemaTypeName}.webp`,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n})\n",
          "isIndexer": false,
          "children": []
        }
      ]
    },
    {
      "_key": "1756909042391-h3hjrm2zx",
      "_type": "filePathGroup",
      "id": "path-1756909042391-kajxt7t",
      "path": "studio/src/schemaTypes",
      "nodes": [
        {
          "_key": "20250903-studio-indexer-file",
          "_type": "treeNode",
          "id": "file-studio-indexer",
          "name": "index.ts",
          "type": "file",
          "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCasePageType}} } from './documents/{{.KebabCasePageType}}'\n// END OF DOCUMENT IMPORT\n\n// START OF SITEMAP TYPES ITEM\n  {{.LowerCasePageType}},\n// END OF SITEMAP TYPES ITEM\n",
          "isIndexer": false,
          "children": []
        }
      ]
    }
  ]
}