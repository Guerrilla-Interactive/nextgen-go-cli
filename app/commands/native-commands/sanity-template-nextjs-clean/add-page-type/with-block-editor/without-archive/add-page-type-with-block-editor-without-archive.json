{
  "_id": "add-page-type-with-block-editor-without-archive",
  "_type": "command",
  "title": "Add PageType with BlockEditor without Archive",
  "slug": "add-page-type-with-block-editor-without-archive",
  "show": { "anyOf": [
    { "packageJson": { "name": "never" } },
    { "packageJsonArrayContains": { "nextgen-identifiers": "never" } },
    { "commandPackagesContains": ["never"] }
  ] },
  "filePaths": [
    {
      "_key": "1756909676259-a4vf5cwmy",
      "_type": "filePathGroup",
      "id": "path-1756909676259-p18gjgt",
      "path": "frontend/app",
      "nodes": [
        {
          "_key": "20250903-front-routes-group",
          "_type": "treeNode",
          "id": "folder-frontend-routes-group",
          "name": "({{.KebabCasePageType}}-route)",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "children": [
            {
              "_key": "20250903-front-slug-folder",
              "_type": "treeNode",
              "children": [
                {
                  "_key": "20250903-front-slug-param",
                  "_type": "treeNode",
                  "children": [
                    {
                      "_key": "20250903-front-slug-page",
                      "_type": "treeNode",
                      "id": "file-frontend-slug-page",
                      "name": "page.tsx",
                      "type": "file",
                      "code": "import type {Metadata, ResolvingMetadata} from 'next'\r\nimport {notFound} from 'next/navigation'\r\nimport {type PortableTextBlock} from 'next-sanity'\r\nimport {Suspense} from 'react'\r\n\r\nimport Avatar from '@/app/components/Avatar'\r\nimport CoverImage from '@/app/components/CoverImage'\r\nimport {MorePosts} from '@/app/components/Posts'\r\nimport PortableText from '@/app/components/PortableText'\r\nimport {sanityFetch} from '@/sanity/lib/live'\r\nimport { {{.LowerCasePageType}}Slugs, {{.LowerCasePageType}}BySlugQuery } from '@/sanity/lib/pagetype-queries/{{.KebabCasePageType}}.queries'\r\nimport {resolveOpenGraphImage} from '@/sanity/lib/utils'\r\n\r\nexport type Props = { params: Promise<{slug: string}> }\r\n\r\nexport async function generateStaticParams() {\r\n  const {data} = await sanityFetch({\r\n    query: {{.LowerCasePageType}}Slugs,\r\n    perspective: 'published',\r\n    stega: false,\r\n  })\r\n  return data\r\n}\r\n\r\nexport async function generateMetadata(props: Props, parent: ResolvingMetadata): Promise<Metadata> {\r\n  const params = await props.params\r\n  const {data: doc} = await sanityFetch({\r\n    query: {{.LowerCasePageType}}BySlugQuery,\r\n    params,\r\n    stega: false,\r\n  })\r\n\r\n  const previousImages = (await parent).openGraph?.images || []\r\n  const ogImage = resolveOpenGraphImage(doc?.coverImage)\r\n\r\n  return {\r\n    authors:\r\n      doc?.author?.firstName && doc?.author?.lastName\r\n        ? [{name: `${doc.author.firstName} ${doc.author.lastName}`}] \r\n        : [],\r\n    title: doc?.title,\r\n    description: doc?.excerpt,\r\n    openGraph: {\r\n      images: ogImage ? [ogImage, ...previousImages] : previousImages,\r\n    },\r\n  } satisfies Metadata\r\n}\r\n\r\nexport default async function {{.PascalCasePageType}}Page(props: Props) {\r\n  const params = await props.params\r\n  const [{data: doc}] = await Promise.all([\r\n    sanityFetch({ query: {{.LowerCasePageType}}BySlugQuery, params })\r\n  ])\r\n\r\n  if (!doc?._id) {\r\n    return notFound()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n        <div className=\"container my-12 lg:my-24 grid gap-12\">\r\n          <div>\r\n            <div className=\"pb-6 grid gap-6 mb-6 border-b border-gray-100\">\r\n              <div className=\"max-w-3xl flex flex-col gap-6\">\r\n                <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\r\n                  {doc.title}\r\n                </h2>\r\n              </div>\r\n              <div className=\"max-w-3xl flex gap-4 items-center\">\r\n                {doc.author && doc.author.firstName && doc.author.lastName && (\r\n                  <Avatar person={doc.author} date={doc.date} />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <article className=\"gap-6 grid max-w-4xl\">\r\n              <div className=\"\">\r\n                {doc?.coverImage && <CoverImage image={doc.coverImage} priority />}\r\n              </div>\r\n              {doc?.content?.length ? (\r\n                <PortableText className=\"max-w-2xl\" value={doc.content as PortableTextBlock[]} />\r\n              ) : null}\r\n            </article>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"border-t border-gray-100 bg-gray-50\">\r\n        <div className=\"container py-12 lg:py-24 grid gap-12\">\r\n          <aside>\r\n            <Suspense>{await MorePosts({skip: doc._id, limit: 2})}</Suspense>\r\n          </aside>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n",
                      "isIndexer": false,
                      "markers": [],
                      "children": []
                    }
                  ],
                  "code": "",
                  "id": "folder-frontend-slug",
                  "isIndexer": false,
                  "name": "[slug]",
                  "type": "folder"
                }
              ],
              "code": "",
              "id": "folder-frontend-slug-root",
              "isIndexer": false,
              "name": "{{.KebabCasePageType}}",
              "type": "folder"
            }
          ]
        }
      ]
    },
    {
      "_key": "1756909676259-wwlf2ykwx",
      "_type": "filePathGroup",
      "id": "path-1756909676259-035ot88",
      "path": "frontend/sanity/lib",
      "nodes": [
        {
          "_key": "1757064566263-k9lklr230",
          "_type": "treeNode",
          "id": "folder-1757064566263",
          "name": "pagetype-queries",
          "type": "folder",
          "code": "",
          "isIndexer": false,
          "markers": [],
          "children": [
            {
              "_key": "20250903-front-queries-file",
              "_type": "treeNode",
              "id": "file-frontend-queries",
              "name": "{{.KebabCasePageType}}.queries.ts",
              "type": "file",
              "code": "import { defineQuery } from \"next-sanity\";\r\nimport { linkFields, linkReference } from \"../queries\";\r\n \r\nexport const listFields = /* groq */ `\r\n  _id,\r\n  \"name\": coalesce(name, \"Untitled\"),\r\n  \"slug\": slug.current,\r\n  heading,\r\n  subheading\r\n`;\r\n\r\n// List (plural)\r\nexport const all{{.PascalCasePlural}}Query = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)] | order(_updatedAt desc) {\r\n    ${listFields}\r\n  }\r\n`);\r\n\r\n// By slug (singular)\r\nexport const {{.LowerCasePageType}}BySlugQuery = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageType}}\" && slug.current == $slug][0]{\r\n    _id,\r\n    _type,\r\n    name,\r\n    slug,\r\n    heading,\r\n    subheading,\r\n    \"pageBuilder\": pageBuilder[]{\r\n        ...,\r\n        _type == \"callToAction\" => {\r\n          ${linkFields},\r\n          },\r\n          _type == \"infoSection\" => {\r\n            content[]{\r\n              ...,\r\n              markDefs[]{\r\n                ...,\r\n                ${linkReference}\r\n              }\r\n            }\r\n          }\r\n        },\r\n    }\r\n`);\r\n\r\n\r\n// Slugs only\r\nexport const {{.LowerCasePageType}}Slugs = defineQuery(`\r\n  *[_type == \"{{.LowerCasePageType}}\" && defined(slug.current)]{ \"slug\": slug.current }\r\n`);\r\n",
              "isIndexer": false,
              "markers": [],
              "children": []
            }
          ]
        },
        {
          "_key": "1756919951450-hqircx415",
          "_type": "treeNode",
          "id": "file-1756919951450",
          "markers": 
          [
          {"mark":"EXPORT LINK FIELDS", "fallback":{
            "behaviour": "replaceIfMissing",
            "target": "const linkFields = /* groq */ `",
            "requireAbsent": "export const linkFields = /* groq */ `",
            "replacement": "export const linkFields = /* groq */ `",
            "occurrence": "first"
            }
          },
          {"mark":"EXPORT LINK REFERENCE", "fallback":{
            "behaviour": "replaceIfMissing",
            "target": "const linkReference = /* groq */ `",
            "requireAbsent": "export const linkReference = /* groq */ `",
            "replacement": "export const linkReference = /* groq */ `",
            "occurrence": "first"
            }
          },
          {"mark":"LINK REFERENCES", "fallback":{
            "target": "_type == \"link\" => {",  
            "behaviour": "insertAfter"
            }
          },     
          {"mark":"SITEMAP TYPES", "fallback":{
            "target": "&& defined(slug.current)] | order(_type asc)",
            "behaviour": "insertBeforeInline",
            "content": " &&_type == \"{{.LowerCasePageType}}\"",
            "fallbackOnly": true
          }}],
          "name": "queries.ts",
          "type": "file",
          "code": "//THIS IS AN INDEXER FILE \nimport {defineQuery} from 'next-sanity'\r\n\r\nexport const settingsQuery = defineQuery(`*[_type == \"settings\"][0]`)\r\n\r\nexport const postFields = /* groq */ `\r\n  _id,\r\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\r\n  \"title\": coalesce(title, \"Untitled\"),\r\n  \"slug\": slug.current,\r\n  excerpt,\r\n  coverImage,\r\n  \"date\": coalesce(date, _updatedAt),\r\n  \"author\": author->{firstName, lastName, picture},\r\n`\r\n\r\nexport const linkReference = /* groq */ `\r\n  _type == \"link\" => {\r\n    \"page\": page->slug.current,\r\n    \"post\": post->slug.current,\r\n    // START OF LINK REFERENCES \r\n    \"{{.LowerCasePageType}}\": {{.LowerCasePageType}}->slug.current,\r\n    // END OF LINK REFERENCES IMPORT\r\n\r\n  }\r\n`\r\n\r\nexport const linkFields = /* groq */ `\r\n  link {\r\n      ...,\r\n      ${linkReference}\r\n      }\r\n`\r\n\r\nexport const pageBuilderFields = /* groq */ `\r\n  ...,\r\n  _type == \"callToAction\" => {\r\n    ${linkFields},\r\n  },\r\n  _type == \"infoSection\" => {\r\n    content[]{\r\n      ...,\r\n      markDefs[]{\r\n        ...,\r\n        ${linkReference}\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const getPageQuery = defineQuery(`\r\n  *[_type == 'page' && slug.current == $slug][0]{\r\n    _id,\r\n    _type,\r\n    name,\r\n    slug,\r\n    heading,\r\n    subheading,\r\n    \"pageBuilder\": pageBuilder[]{\r\n      ${pageBuilderFields}\r\n    },\r\n  }\r\n`)\r\n\r\n\r\n\r\nexport const sitemapData = defineQuery(`\r\n  *[_type == \"page\" || _type == \"post\" && // START OF SITEMAP TYPES ITEM && _type == \"{{.LowerCasePageType}}\" && // END OF SITEMAP TYPES ITEM defined(slug.current)] | order(_type asc) {\r\n    \"slug\": slug.current,\r\n    _type,\r\n    _updatedAt,\r\n  }\r\n`)\r\n\r\nexport const allPostsQuery = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const morePostsQuery = defineQuery(`\r\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postQuery = defineQuery(`\r\n  *[_type == \"post\" && slug.current == $slug] [0] {\r\n    content[]{\r\n    ...,\r\n    markDefs[]{\r\n      ...,\r\n      ${linkReference}\r\n    }\r\n  },\r\n    ${postFields}\r\n  }\r\n`)\r\n\r\nexport const postPagesSlugs = defineQuery(`\r\n  *[_type == \"post\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n\r\nexport const pagesSlugs = defineQuery(`\r\n  *[_type == \"page\" && defined(slug.current)]\r\n  {\"slug\": slug.current}\r\n`)\r\n",
          "isIndexer": true,
          "children": []
        }
      ]
    },
    {
      "_key": "1756909676259-rucplq6gn",
      "_type": "filePathGroup",
      "id": "path-1756909676259-07ogeni",
      "path": "studio/src/schemaTypes/documents",
      "nodes": [
        {
          "_key": "20250903-studio-schema-file",
          "_type": "treeNode",
          "id": "file-studio-schema",
          "name": "{{.KebabCasePageType}}.ts",
          "type": "file",
          "code": "import {DocumentTextIcon} from '@sanity/icons'\nimport {format, parseISO} from 'date-fns'\nimport {defineField, defineType} from 'sanity'\n\nexport const {{.LowerCasePageType}} = defineType({\n  name: '{{.LowerCasePageType}}',\n  title: '{{.PascalCasePageType}}',\n  icon: DocumentTextIcon,\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      description: 'A slug is required for the page to show up in the preview',\n      options: {\n        source: 'title',\n        maxLength: 96,\n        isUnique: (value, context) => context.defaultIsUnique(value, context),\n      },\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'content',\n      title: 'Content',\n      type: 'blockContent',\n    }),\n    defineField({\n      name: 'excerpt',\n      title: 'Excerpt',\n      type: 'text',\n    }),\n    defineField({\n      name: 'coverImage',\n      title: 'Cover Image',\n      type: 'image',\n      options: {\n        hotspot: true,\n        aiAssist: {\n          imageDescriptionField: 'alt',\n        },\n      },\n      fields: [\n        {\n          name: 'alt',\n          type: 'string',\n          title: 'Alternative text',\n          description: 'Important for SEO and accessibility.',\n          validation: (rule) => {\n            // Custom validation to ensure alt text is provided if the image is present. https://www.sanity.io/docs/validation\n            return rule.custom((alt, context) => {\n              if ((context.document?.coverImage as any)?.asset?._ref && !alt) {\n                return 'Required'\n              }\n              return true\n            })\n          },\n        },\n      ],\n      validation: (rule) => rule.required(),\n    }),\n    defineField({\n      name: 'date',\n      title: 'Date',\n      type: 'datetime',\n      initialValue: () => new Date().toISOString(),\n    }),\n    defineField({\n      name: 'author',\n      title: 'Author',\n      type: 'reference',\n      to: [{type: 'person'}],\n    }),\n  ],\n  // List preview configuration. https://www.sanity.io/docs/previews-list-views\n  preview: {\n    select: {\n      title: 'title',\n      authorFirstName: 'author.firstName',\n      authorLastName: 'author.lastName',\n      date: 'date',\n      media: 'coverImage',\n    },\n    prepare({title, media, authorFirstName, authorLastName, date}) {\n      const subtitles = [\n        authorFirstName && authorLastName && `by ${authorFirstName} ${authorLastName}`,\n        date && `on ${format(parseISO(date), 'LLL d, yyyy')}`,\n      ].filter(Boolean)\n\n      return {title, media, subtitle: subtitles.join(' ')}\n    },\n  },\n})\n",
          "isIndexer": false,
          "children": []
        }
      ]
    },
    {
      "_key": "1756909676259-ubpqe97hu",
      "_type": "filePathGroup",
      "id": "path-1756909676259-2wf97a8",
      "path": "studio/src/schemaTypes",
      "nodes": [
        {
          "_key": "20250903-studio-indexer-file",
          "_type": "treeNode",
          "id": "file-studio-indexer",
          "name": "index.ts",
          "type": "file",
          "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCasePageType}} } from './documents/{{.KebabCasePageType}}'\n// END OF DOCUMENT IMPORT\n\n// START OF DOCUMENT ARRAY ITEM\n  {{.LowerCasePageType}},\n// END OF DOCUMENT ARRAY ITEM\n",
          "isIndexer": false,
          "children": []
        }
      ]
    }
  ]
}