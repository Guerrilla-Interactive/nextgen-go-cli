{
    "_id": "Add-PageType-Index-And-Slug",
    "_type": "command",
    "title": "Add PageType (plural index + singular slug)",
    "slug": "add-pagetype-index-and-slug",
    "show": {
      "anyOf": [
        { "packageJson": { "name": "sanity-template-nextjs-clean" } },
        { "packageJsonArrayContains": { "nextgen-identifiers": "sanity-template-nextjs-clean" } },
        { "commandPackagesContains": ["sanity-template-nextjs-clean"] }
      ]
    },
    "filePaths": [
      {
        "_key": "20250903-front-routes",
        "_type": "filePathGroup",
        "id": "frontend-routes",
        "path": "frontend/app",
        "nodes": [
          {
            "_key": "20250903-front-routes-group",
            "_type": "treeNode",
            "id": "folder-frontend-routes-group",
            "name": "({{.KebabCaseComponentName}}-route)",
            "type": "folder",
            "code": "",
            "isIndexer": false,
            "children": [
              {
                "_key": "20250903-front-index-folder",
                "_type": "treeNode",
                "id": "folder-frontend-index",
                "name": "{{.KebabCaseComponentName}}s",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-index-file",
                    "_type": "treeNode",
                    "id": "file-frontend-index",
                    "name": "page.tsx",
                    "type": "file",
                    "isIndexer": false,
                    "children": [],
                    "code": "import Link from \"next/link\";\nimport type { Metadata } from \"next\";\nimport { client } from \"@/sanity/lib/client\";\nimport { all{{.PascalCaseComponentName}}sQuery } from \"@/sanity/lib/{{.KebabCaseComponentName}}.queries\";\n\nexport const metadata: Metadata = {\n  title: \"{{.PascalCaseComponentName}}s\",\n  description: \"All {{.LowerCaseComponentName}}s\"\n};\n\nexport default async function {{.PascalCaseComponentName}}IndexPage() {\n  const items = await client.fetch(all{{.PascalCaseComponentName}}sQuery);\n\n  if (!items?.length) {\n    return (\n      <main className=\"container mx-auto p-6\">\n        <h1 className=\"text-2xl font-semibold\">{{.PascalCaseComponentName}}s</h1>\n        <p className=\"opacity-70 mt-2\">No {{.LowerCaseComponentName}}s yet.</p>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"container mx-auto p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6\">{{.PascalCaseComponentName}}s</h1>\n      <ul className=\"space-y-4\">\n        {items.map((it: any) => (\n          <li key={it._id} className=\"border rounded-lg p-4\">\n            <h2 className=\"text-lg font-medium\">\n              <Link href={`/{{.KebabCaseComponentName}}/${it.slug}`}>{it.title}</Link>\n            </h2>\n            {it.excerpt && <p className=\"opacity-80 mt-1\">{it.excerpt}</p>}\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n"
                  }
                ]
              },
              {
                "_key": "20250903-front-slug-folder",
                "_type": "treeNode",
                "id": "folder-frontend-slug-root",
                "name": "{{.KebabCaseComponentName}}",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-slug-param",
                    "_type": "treeNode",
                    "id": "folder-frontend-slug",
                    "name": "[slug]",
                    "type": "folder",
                    "code": "",
                    "isIndexer": false,
                    "children": [
                        {
                            "_key": "20250903-front-slug-page",
                            "_type": "treeNode",
                            "id": "file-frontend-slug-page",
                            "name": "page.tsx",
                            "type": "file",
                            "isIndexer": false,
                            "children": [],
                            "code": "import type {Metadata, ResolvingMetadata} from 'next'\nimport {notFound} from 'next/navigation'\nimport {type PortableTextBlock} from 'next-sanity'\nimport {Suspense} from 'react'\n\nimport Avatar from '@/app/components/Avatar'\nimport CoverImage from '@/app/components/CoverImage'\nimport {MorePosts} from '@/app/components/Posts'\nimport PortableText from '@/app/components/PortableText'\nimport {sanityFetch} from '@/sanity/lib/live'\nimport { {{.LowerCaseComponentName}}Slugs, {{.LowerCaseComponentName}}BySlugQuery } from '@/sanity/lib/{{.KebabCaseComponentName}}.queries'\nimport {resolveOpenGraphImage} from '@/sanity/lib/utils'\n\nexport type Props = { params: Promise<{slug: string}> }\n\n/**\n * Generate the static params for the page.\n * Learn more: https://nextjs.org/docs/app/api-reference/functions/generate-static-params\n */\nexport async function generateStaticParams() {\n  const {data} = await sanityFetch({\n    query: {{.LowerCaseComponentName}}Slugs,\n    // Use the published perspective in generateStaticParams\n    perspective: 'published',\n    stega: false,\n  })\n  return data\n}\n\n/**\n * Generate metadata for the page.\n * Learn more: https://nextjs.org/docs/app/api-reference/functions/generate-metadata#generatemetadata-function\n */\nexport async function generateMetadata(props: Props, parent: ResolvingMetadata): Promise<Metadata> {\n  const params = await props.params\n  const {data: doc} = await sanityFetch({\n    query: {{.LowerCaseComponentName}}BySlugQuery,\n    params,\n    // Metadata should never contain stega\n    stega: false,\n  })\n\n  const previousImages = (await parent).openGraph?.images || []\n  const ogImage = resolveOpenGraphImage(doc?.coverImage)\n\n  return {\n    authors:\n      doc?.author?.firstName && doc?.author?.lastName\n        ? [{name: `${doc.author.firstName} ${doc.author.lastName}`}] \n        : [],\n    title: doc?.title,\n    description: doc?.excerpt,\n    openGraph: {\n      images: ogImage ? [ogImage, ...previousImages] : previousImages,\n    },\n  } satisfies Metadata\n}\n\nexport default async function {{.PascalCaseComponentName}}Page(props: Props) {\n  const params = await props.params\n  const [{data: doc}] = await Promise.all([\n    sanityFetch({ query: {{.LowerCaseComponentName}}BySlugQuery, params })\n  ])\n\n  if (!doc?._id) {\n    return notFound()\n  }\n\n  return (\n    <>\n      <div className=\"\">\n        <div className=\"container my-12 lg:my-24 grid gap-12\">\n          <div>\n            <div className=\"pb-6 grid gap-6 mb-6 border-b border-gray-100\">\n              <div className=\"max-w-3xl flex flex-col gap-6\">\n                <h2 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-7xl\">\n                  {doc.title}\n                </h2>\n              </div>\n              <div className=\"max-w-3xl flex gap-4 items-center\">\n                {doc.author && doc.author.firstName && doc.author.lastName && (\n                  <Avatar person={doc.author} date={doc.date} />\n                )}\n              </div>\n            </div>\n            <article className=\"gap-6 grid max-w-4xl\">\n              <div className=\"\">\n                {doc?.coverImage && <CoverImage image={doc.coverImage} priority />}\n              </div>\n              {doc?.content?.length ? (\n                <PortableText className=\"max-w-2xl\" value={doc.content as PortableTextBlock[]} />\n              ) : null}\n            </article>\n          </div>\n        </div>\n      </div>\n      <div className=\"border-t border-gray-100 bg-gray-50\">\n        <div className=\"container py-12 lg:py-24 grid gap-12\">\n          <aside>\n            <Suspense>{await MorePosts({skip: doc._id, limit: 2})}</Suspense>\n          </aside>\n        </div>\n      </div>\n    </>\n  )\n}\n"
                          },
                      {
                        "_key": "20250903-front-loading",
                        "_type": "treeNode",
                        "id": "file-frontend-loading",
                        "name": "loading.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "export default function Loading() { return <div className=\\\"p-6\\\">Loading â€¦</div>; }\n"
                      },
                      {
                        "_key": "20250903-front-notfound",
                        "_type": "treeNode",
                        "id": "file-frontend-notfound",
                        "name": "not-found.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "export default function NotFound() { return <div className=\\\"p-6\\\">{{.PascalCaseComponentName}} not found.</div>; }\n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "_key": "20250903-front-queries",
        "_type": "filePathGroup",
        "id": "frontend-queries",
        "path": "frontend/sanity/lib",
        "nodes": [
          {
            "_key": "20250903-front-queries-file",
            "_type": "treeNode",
            "id": "file-frontend-queries",
            "name": "{{.KebabCaseComponentName}}.queries.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import { defineQuery } from \"next-sanity\";\n\nexport const fields = /* groq */ `\n  _id,\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  hero,\n  content\n`;\n\nexport const all{{.PascalCaseComponentName}}sQuery = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && defined(slug.current)] | order(_updatedAt desc) {\n    ${fields}\n  }\n`);\n\nexport const {{.LowerCaseComponentName}}BySlugQuery = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && slug.current == $slug][0] {\n    ${fields}\n  }\n`);\n\nexport const {{.LowerCaseComponentName}}Slugs = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && defined(slug.current)]{ \"slug\": slug.current }\n`);\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-schema",
        "_type": "filePathGroup",
        "id": "studio-schema",
        "path": "studio/src/schemaTypes/documents",
        "nodes": [
          {
            "_key": "20250903-studio-schema-file",
            "_type": "treeNode",
            "id": "file-studio-schema",
            "name": "{{.KebabCaseComponentName}}.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCaseComponentName}} = defineType({\n  name: '{{.LowerCaseComponentName}}',\n  title: '{{.PascalCaseComponentName}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({ name: 'title', title: 'Title', type: 'string', validation: r => r.required() }),\n    defineField({ name: 'slug', title: 'Slug', type: 'slug', options: { source: 'title', maxLength: 96 }, validation: r => r.required() }),\n    defineField({ name: 'excerpt', title: 'Excerpt', type: 'text' }),\n    defineField({\n      name: 'hero', title: 'Hero image', type: 'image', options: { hotspot: true, aiAssist: { imageDescriptionField: 'alt' } },\n      fields: [\n        defineField({ name: 'alt', title: 'Alt text', type: 'string', description: 'Important for SEO and accessibility.', validation: rule => rule.custom((alt, ctx) => { if ((ctx.document?.hero as any)?.asset?._ref && !alt) return 'Required'; return true; }) })\n      ]\n    }),\n    defineField({ name: 'content', title: 'Content', type: 'blockContent' }),\n  ],\n  preview: {\n    select: { title: 'title', media: 'hero' },\n    prepare({ title, media }) { return { title, media } }\n  }\n})\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-indexer-group",
        "_type": "filePathGroup",
        "id": "studio-indexer",
        "path": "studio/src/schemaTypes",
        "nodes": [
          {
            "_key": "20250903-studio-indexer-file",
            "_type": "treeNode",
            "id": "file-studio-indexer",
            "name": "index.ts",
            "type": "file",
            "isIndexer": true,
            "children": [],
            "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCaseComponentName}} } from './documents/{{.KebabCaseComponentName}}'\n// END OF DOCUMENT IMPORT\n\n// START OF DOCUMENT ARRAY ITEM\n  {{.LowerCaseComponentName}},\n// END OF DOCUMENT ARRAY ITEM\n"
          }
        ]
      }
    ]
  }
  