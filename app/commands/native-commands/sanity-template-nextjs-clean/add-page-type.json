{
    "_id": "Add-PageType-Index-And-Slug",
    "_type": "command",
    "title": "Add PageType (plural index + singular slug)",
    "slug": "add-pagetype-index-and-slug",
    "show": {
      "anyOf": [
        { "packageJson": { "name": "sanity-template-nextjs-clean" } },
        { "packageJsonArrayContains": { "nextgen-identifiers": "sanity-template-nextjs-clean" } },
        { "commandPackagesContains": ["sanity-template-nextjs-clean"] }
      ]
    },
    "filePaths": [
      {
        "_key": "20250903-front-routes",
        "_type": "filePathGroup",
        "id": "frontend-routes",
        "path": "frontend/app",
        "nodes": [
          {
            "_key": "20250903-front-routes-group",
            "_type": "treeNode",
            "id": "folder-frontend-routes-group",
            "name": "({{.KebabCaseComponentName}}-route)",
            "type": "folder",
            "code": "",
            "isIndexer": false,
            "children": [
              {
                "_key": "20250903-front-index-folder",
                "_type": "treeNode",
                "id": "folder-frontend-index",
                "name": "{{.KebabCaseComponentName}}s",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-index-file",
                    "_type": "treeNode",
                    "id": "file-frontend-index",
                    "name": "page.tsx",
                    "type": "file",
                    "isIndexer": false,
                    "children": [],
                    "code": "import Link from \"next/link\";\nimport type { Metadata } from \"next\";\nimport { client } from \"@/sanity/lib/client\";\nimport { allItemsQuery } from \"@/sanity/lib/{{.KebabCaseComponentName}}.queries\";\n\nexport const metadata: Metadata = {\n  title: \"{{.PascalCaseComponentName}}s\",\n  description: \"All {{.LowerCaseComponentName}}s\"\n};\n\nexport default async function {{.PascalCaseComponentName}}IndexPage() {\n  const items = await client.fetch(allItemsQuery);\n\n  if (!items?.length) {\n    return (\n      <main className=\"container mx-auto p-6\">\n        <h1 className=\"text-2xl font-semibold\">{{.PascalCaseComponentName}}s</h1>\n        <p className=\"opacity-70 mt-2\">No {{.LowerCaseComponentName}}s yet.</p>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"container mx-auto p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6\">{{.PascalCaseComponentName}}s</h1>\n      <ul className=\"space-y-4\">\n        {items.map((it: any) => (\n          <li key={it._id} className=\"border rounded-lg p-4\">\n            <h2 className=\"text-lg font-medium\">\n              <Link href={`/{{.KebabCaseComponentName}}/${it.slug}`}>{it.title}</Link>\n            </h2>\n            {it.excerpt && <p className=\"opacity-80 mt-1\">{it.excerpt}</p>}\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n"
                  }
                ]
              },
              {
                "_key": "20250903-front-slug-folder",
                "_type": "treeNode",
                "id": "folder-frontend-slug-root",
                "name": "{{.KebabCaseComponentName}}",
                "type": "folder",
                "code": "",
                "isIndexer": false,
                "children": [
                  {
                    "_key": "20250903-front-slug-param",
                    "_type": "treeNode",
                    "id": "folder-frontend-slug",
                    "name": "[slug]",
                    "type": "folder",
                    "code": "",
                    "isIndexer": false,
                    "children": [
                      {
                        "_key": "20250903-front-slug-page",
                        "_type": "treeNode",
                        "id": "file-frontend-slug-page",
                        "name": "page.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "import type { Metadata } from \"next\";\nimport Image from \"next/image\";\nimport { client } from \"@/sanity/lib/client\";\nimport { itemBySlugQuery, itemsSlugs } from \"@/sanity/lib/{{.KebabCaseComponentName}}.queries\";\nimport PortableText from \"@/app/components/PortableText\";\nimport { urlForImage } from \"@/sanity/lib/utils\";\n\nexport async function generateStaticParams() {\n  const slugs: { slug: string }[] = await client.fetch(itemsSlugs);\n  return slugs.map(({ slug }) => ({ slug }));\n}\n\nexport async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {\n  const data = await client.fetch(itemBySlugQuery, { slug: params.slug });\n  return {\n    title: data?.title ?? \"{{.PascalCaseComponentName}}\",\n    description: data?.excerpt ?? undefined,\n  };\n}\n\nexport default async function {{.PascalCaseComponentName}}SlugPage({ params }: { params: { slug: string } }) {\n  const data = await client.fetch(itemBySlugQuery, { slug: params.slug });\n  if (!data) {\n    return (\n      <main className=\"container mx-auto p-6\">\n        <h1 className=\"text-2xl font-semibold\">Not found</h1>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"container mx-auto p-6 space-y-6\">\n      <header>\n        <h1 className=\"text-3xl font-semibold\">{data.title}</h1>\n      </header>\n\n      {data.hero?.asset && (\n        <div className=\"relative w-full aspect-[16/9] overflow-hidden rounded-xl\">\n          <Image\n            src={urlForImage(data.hero).width(1600).height(900).url()}\n            alt={data.hero?.alt || data.title}\n            fill\n            sizes=\"100vw\"\n            className=\"object-cover\"\n          />\n        </div>\n      )}\n\n      {Array.isArray(data.content) && data.content.length > 0 ? (\n        <article className=\"prose max-w-none dark:prose-invert\">\n          <PortableText value={data.content} />\n        </article>\n      ) : null}\n    </main>\n  );\n}\n"
                      },
                      {
                        "_key": "20250903-front-loading",
                        "_type": "treeNode",
                        "id": "file-frontend-loading",
                        "name": "loading.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "export default function Loading() { return <div className=\"p-6\">Loading â€¦</div>; }\n"
                      },
                      {
                        "_key": "20250903-front-notfound",
                        "_type": "treeNode",
                        "id": "file-frontend-notfound",
                        "name": "not-found.tsx",
                        "type": "file",
                        "isIndexer": false,
                        "children": [],
                        "code": "export default function NotFound() { return <div className=\"p-6\">{{.PascalCaseComponentName}} not found.</div>; }\n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "_key": "20250903-front-queries",
        "_type": "filePathGroup",
        "id": "frontend-queries",
        "path": "frontend/sanity/lib",
        "nodes": [
          {
            "_key": "20250903-front-queries-file",
            "_type": "treeNode",
            "id": "file-frontend-queries",
            "name": "{{.KebabCaseComponentName}}.queries.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import { defineQuery } from \"next-sanity\";\n\nexport const fields = /* groq */ `\n  _id,\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  hero,\n  content\n`;\n\nexport const allItemsQuery = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && defined(slug.current)] | order(_updatedAt desc) {\n    ${fields}\n  }\n`);\n\nexport const itemBySlugQuery = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && slug.current == $slug][0] {\n    ${fields}\n  }\n`);\n\nexport const itemsSlugs = defineQuery(`\n  *[_type == \"{{.LowerCaseComponentName}}\" && defined(slug.current)]{ \"slug\": slug.current }\n`);\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-schema",
        "_type": "filePathGroup",
        "id": "studio-schema",
        "path": "studio/src/schemaTypes/documents",
        "nodes": [
          {
            "_key": "20250903-studio-schema-file",
            "_type": "treeNode",
            "id": "file-studio-schema",
            "name": "{{.KebabCaseComponentName}}.ts",
            "type": "file",
            "isIndexer": false,
            "children": [],
            "code": "import {defineField, defineType} from 'sanity'\nimport { DocumentIcon } from '@sanity/icons'\n\nexport const {{.LowerCaseComponentName}} = defineType({\n  name: '{{.LowerCaseComponentName}}',\n  title: '{{.PascalCaseComponentName}}',\n  type: 'document',\n  icon: DocumentIcon,\n  fields: [\n    defineField({ name: 'title', title: 'Title', type: 'string', validation: r => r.required() }),\n    defineField({ name: 'slug', title: 'Slug', type: 'slug', options: { source: 'title', maxLength: 96 }, validation: r => r.required() }),\n    defineField({ name: 'excerpt', title: 'Excerpt', type: 'text' }),\n    defineField({\n      name: 'hero', title: 'Hero image', type: 'image', options: { hotspot: true, aiAssist: { imageDescriptionField: 'alt' } },\n      fields: [\n        defineField({ name: 'alt', title: 'Alt text', type: 'string', description: 'Important for SEO and accessibility.', validation: rule => rule.custom((alt, ctx) => { if ((ctx.document?.hero as any)?.asset?._ref && !alt) return 'Required'; return true; }) })\n      ]\n    }),\n    defineField({ name: 'content', title: 'Content', type: 'blockContent' }),\n  ],\n  preview: {\n    select: { title: 'title', media: 'hero' },\n    prepare({ title, media }) { return { title, media } }\n  }\n})\n"
          }
        ]
      },
      {
        "_key": "20250903-studio-indexer-group",
        "_type": "filePathGroup",
        "id": "studio-indexer",
        "path": "studio/src/schemaTypes",
        "nodes": [
          {
            "_key": "20250903-studio-indexer-file",
            "_type": "treeNode",
            "id": "file-studio-indexer",
            "name": "index.ts",
            "type": "file",
            "isIndexer": true,
            "children": [],
            "code": "// THIS IS AN INDEXER FILE\n\n// START OF DOCUMENT IMPORT\nimport { {{.LowerCaseComponentName}} } from './documents/{{.KebabCaseComponentName}}'\n// END OF DOCUMENT IMPORT\n\n// START OF DOCUMENT ARRAY ITEM\n  {{.LowerCaseComponentName}},\n// END OF DOCUMENT ARRAY ITEM\n"
          }
        ]
      }
    ]
  }
  